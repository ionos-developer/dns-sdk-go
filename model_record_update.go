/*
DNS API

## Working with the API Every endpoint uses the `X-API-Key` header for authorization, to obtain the key please see the [Official Documentation](/docs/getstarted).  Please note that any zone or record updates might conflict with active services. In such cases, the DNS records belonging to the conflicting services will be deactivated.  ## Support Support questions may be posted in English: <a href='/docs/getstarted#support'>API Beta Support</a>.  Please note that in the Beta phase we offer support in the business Hours Mo-Fri 9:00-17:00 EET. <h2> <details>   <summary>Release notes</summary>   <ul>     <li>Version 1.0.0 Exposed CRUD operations for customer zone.</li>     <li>Version 1.0.1 Added response body for UPDATE and CREATE record operations.</li>   </ul> </details> </h2> 

API version: 1.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dns

import (
	"encoding/json"
)

// RecordUpdate struct for RecordUpdate
type RecordUpdate struct {
	// When is true, the record is not visible for lookup.
	Disabled *bool `json:"disabled,omitempty"`
	Content *string `json:"content,omitempty"`
	// Time to live for the record, recommended 3600.
	Ttl *int32 `json:"ttl,omitempty"`
	Prio *int32 `json:"prio,omitempty"`
}

// NewRecordUpdate instantiates a new RecordUpdate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRecordUpdate() *RecordUpdate {
	this := RecordUpdate{}
	var disabled bool = false
	this.Disabled = &disabled
	return &this
}

// NewRecordUpdateWithDefaults instantiates a new RecordUpdate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRecordUpdateWithDefaults() *RecordUpdate {
	this := RecordUpdate{}
	var disabled bool = false
	this.Disabled = &disabled
	return &this
}

// GetDisabled returns the Disabled field value if set, zero value otherwise.
func (o *RecordUpdate) GetDisabled() bool {
	if o == nil || o.Disabled == nil {
		var ret bool
		return ret
	}
	return *o.Disabled
}

// GetDisabledOk returns a tuple with the Disabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordUpdate) GetDisabledOk() (*bool, bool) {
	if o == nil || o.Disabled == nil {
		return nil, false
	}
	return o.Disabled, true
}

// HasDisabled returns a boolean if a field has been set.
func (o *RecordUpdate) HasDisabled() bool {
	if o != nil && o.Disabled != nil {
		return true
	}

	return false
}

// SetDisabled gets a reference to the given bool and assigns it to the Disabled field.
func (o *RecordUpdate) SetDisabled(v bool) {
	o.Disabled = &v
}

// GetContent returns the Content field value if set, zero value otherwise.
func (o *RecordUpdate) GetContent() string {
	if o == nil || o.Content == nil {
		var ret string
		return ret
	}
	return *o.Content
}

// GetContentOk returns a tuple with the Content field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordUpdate) GetContentOk() (*string, bool) {
	if o == nil || o.Content == nil {
		return nil, false
	}
	return o.Content, true
}

// HasContent returns a boolean if a field has been set.
func (o *RecordUpdate) HasContent() bool {
	if o != nil && o.Content != nil {
		return true
	}

	return false
}

// SetContent gets a reference to the given string and assigns it to the Content field.
func (o *RecordUpdate) SetContent(v string) {
	o.Content = &v
}

// GetTtl returns the Ttl field value if set, zero value otherwise.
func (o *RecordUpdate) GetTtl() int32 {
	if o == nil || o.Ttl == nil {
		var ret int32
		return ret
	}
	return *o.Ttl
}

// GetTtlOk returns a tuple with the Ttl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordUpdate) GetTtlOk() (*int32, bool) {
	if o == nil || o.Ttl == nil {
		return nil, false
	}
	return o.Ttl, true
}

// HasTtl returns a boolean if a field has been set.
func (o *RecordUpdate) HasTtl() bool {
	if o != nil && o.Ttl != nil {
		return true
	}

	return false
}

// SetTtl gets a reference to the given int32 and assigns it to the Ttl field.
func (o *RecordUpdate) SetTtl(v int32) {
	o.Ttl = &v
}

// GetPrio returns the Prio field value if set, zero value otherwise.
func (o *RecordUpdate) GetPrio() int32 {
	if o == nil || o.Prio == nil {
		var ret int32
		return ret
	}
	return *o.Prio
}

// GetPrioOk returns a tuple with the Prio field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordUpdate) GetPrioOk() (*int32, bool) {
	if o == nil || o.Prio == nil {
		return nil, false
	}
	return o.Prio, true
}

// HasPrio returns a boolean if a field has been set.
func (o *RecordUpdate) HasPrio() bool {
	if o != nil && o.Prio != nil {
		return true
	}

	return false
}

// SetPrio gets a reference to the given int32 and assigns it to the Prio field.
func (o *RecordUpdate) SetPrio(v int32) {
	o.Prio = &v
}

func (o RecordUpdate) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Disabled != nil {
		toSerialize["disabled"] = o.Disabled
	}
	if o.Content != nil {
		toSerialize["content"] = o.Content
	}
	if o.Ttl != nil {
		toSerialize["ttl"] = o.Ttl
	}
	if o.Prio != nil {
		toSerialize["prio"] = o.Prio
	}
	return json.Marshal(toSerialize)
}

type NullableRecordUpdate struct {
	value *RecordUpdate
	isSet bool
}

func (v NullableRecordUpdate) Get() *RecordUpdate {
	return v.value
}

func (v *NullableRecordUpdate) Set(val *RecordUpdate) {
	v.value = val
	v.isSet = true
}

func (v NullableRecordUpdate) IsSet() bool {
	return v.isSet
}

func (v *NullableRecordUpdate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRecordUpdate(val *RecordUpdate) *NullableRecordUpdate {
	return &NullableRecordUpdate{value: val, isSet: true}
}

func (v NullableRecordUpdate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRecordUpdate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


