/*
DNS API

## Working with the API Every endpoint uses the `X-API-Key` header for authorization, to obtain the key please see the [Official Documentation](/docs/getstarted).  Please note that any zone or record updates might conflict with active services. In such cases, the DNS records belonging to the conflicting services will be deactivated.  ## Support Support questions may be posted in English: <a href='/docs/getstarted#support'>API Beta Support</a>.  Please note that in the Beta phase we offer support in the business Hours Mo-Fri 9:00-17:00 EET. <h2> <details>   <summary>Release notes</summary>    Vesion 1.0.0   Exposed CRUD operations for customer zone. </details> </h2> 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dns

import (
	"encoding/json"
)

// RecordResponse struct for RecordResponse
type RecordResponse struct {
	Id *string `json:"id,omitempty"`
	Name *string `json:"name,omitempty"`
	// Root zone name.
	RootName *string `json:"rootName,omitempty"`
	Type *RecordTypes `json:"type,omitempty"`
	Content *string `json:"content,omitempty"`
	// The date of the last change formatted as yyyy-MM-dd'T'HH:mm:ss.SSS'Z'
	ChangeDate *string `json:"changeDate,omitempty"`
	// Time to live for the record, recommended 3600.
	Ttl *int32 `json:"ttl,omitempty"`
	Prio *int32 `json:"prio,omitempty"`
	// When is true, the record is not visible for lookup.
	Disabled *bool `json:"disabled,omitempty"`
}

// NewRecordResponse instantiates a new RecordResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRecordResponse() *RecordResponse {
	this := RecordResponse{}
	var disabled bool = false
	this.Disabled = &disabled
	return &this
}

// NewRecordResponseWithDefaults instantiates a new RecordResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRecordResponseWithDefaults() *RecordResponse {
	this := RecordResponse{}
	var disabled bool = false
	this.Disabled = &disabled
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *RecordResponse) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordResponse) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *RecordResponse) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *RecordResponse) SetId(v string) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *RecordResponse) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordResponse) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *RecordResponse) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *RecordResponse) SetName(v string) {
	o.Name = &v
}

// GetRootName returns the RootName field value if set, zero value otherwise.
func (o *RecordResponse) GetRootName() string {
	if o == nil || o.RootName == nil {
		var ret string
		return ret
	}
	return *o.RootName
}

// GetRootNameOk returns a tuple with the RootName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordResponse) GetRootNameOk() (*string, bool) {
	if o == nil || o.RootName == nil {
		return nil, false
	}
	return o.RootName, true
}

// HasRootName returns a boolean if a field has been set.
func (o *RecordResponse) HasRootName() bool {
	if o != nil && o.RootName != nil {
		return true
	}

	return false
}

// SetRootName gets a reference to the given string and assigns it to the RootName field.
func (o *RecordResponse) SetRootName(v string) {
	o.RootName = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *RecordResponse) GetType() RecordTypes {
	if o == nil || o.Type == nil {
		var ret RecordTypes
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordResponse) GetTypeOk() (*RecordTypes, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *RecordResponse) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given RecordTypes and assigns it to the Type field.
func (o *RecordResponse) SetType(v RecordTypes) {
	o.Type = &v
}

// GetContent returns the Content field value if set, zero value otherwise.
func (o *RecordResponse) GetContent() string {
	if o == nil || o.Content == nil {
		var ret string
		return ret
	}
	return *o.Content
}

// GetContentOk returns a tuple with the Content field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordResponse) GetContentOk() (*string, bool) {
	if o == nil || o.Content == nil {
		return nil, false
	}
	return o.Content, true
}

// HasContent returns a boolean if a field has been set.
func (o *RecordResponse) HasContent() bool {
	if o != nil && o.Content != nil {
		return true
	}

	return false
}

// SetContent gets a reference to the given string and assigns it to the Content field.
func (o *RecordResponse) SetContent(v string) {
	o.Content = &v
}

// GetChangeDate returns the ChangeDate field value if set, zero value otherwise.
func (o *RecordResponse) GetChangeDate() string {
	if o == nil || o.ChangeDate == nil {
		var ret string
		return ret
	}
	return *o.ChangeDate
}

// GetChangeDateOk returns a tuple with the ChangeDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordResponse) GetChangeDateOk() (*string, bool) {
	if o == nil || o.ChangeDate == nil {
		return nil, false
	}
	return o.ChangeDate, true
}

// HasChangeDate returns a boolean if a field has been set.
func (o *RecordResponse) HasChangeDate() bool {
	if o != nil && o.ChangeDate != nil {
		return true
	}

	return false
}

// SetChangeDate gets a reference to the given string and assigns it to the ChangeDate field.
func (o *RecordResponse) SetChangeDate(v string) {
	o.ChangeDate = &v
}

// GetTtl returns the Ttl field value if set, zero value otherwise.
func (o *RecordResponse) GetTtl() int32 {
	if o == nil || o.Ttl == nil {
		var ret int32
		return ret
	}
	return *o.Ttl
}

// GetTtlOk returns a tuple with the Ttl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordResponse) GetTtlOk() (*int32, bool) {
	if o == nil || o.Ttl == nil {
		return nil, false
	}
	return o.Ttl, true
}

// HasTtl returns a boolean if a field has been set.
func (o *RecordResponse) HasTtl() bool {
	if o != nil && o.Ttl != nil {
		return true
	}

	return false
}

// SetTtl gets a reference to the given int32 and assigns it to the Ttl field.
func (o *RecordResponse) SetTtl(v int32) {
	o.Ttl = &v
}

// GetPrio returns the Prio field value if set, zero value otherwise.
func (o *RecordResponse) GetPrio() int32 {
	if o == nil || o.Prio == nil {
		var ret int32
		return ret
	}
	return *o.Prio
}

// GetPrioOk returns a tuple with the Prio field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordResponse) GetPrioOk() (*int32, bool) {
	if o == nil || o.Prio == nil {
		return nil, false
	}
	return o.Prio, true
}

// HasPrio returns a boolean if a field has been set.
func (o *RecordResponse) HasPrio() bool {
	if o != nil && o.Prio != nil {
		return true
	}

	return false
}

// SetPrio gets a reference to the given int32 and assigns it to the Prio field.
func (o *RecordResponse) SetPrio(v int32) {
	o.Prio = &v
}

// GetDisabled returns the Disabled field value if set, zero value otherwise.
func (o *RecordResponse) GetDisabled() bool {
	if o == nil || o.Disabled == nil {
		var ret bool
		return ret
	}
	return *o.Disabled
}

// GetDisabledOk returns a tuple with the Disabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordResponse) GetDisabledOk() (*bool, bool) {
	if o == nil || o.Disabled == nil {
		return nil, false
	}
	return o.Disabled, true
}

// HasDisabled returns a boolean if a field has been set.
func (o *RecordResponse) HasDisabled() bool {
	if o != nil && o.Disabled != nil {
		return true
	}

	return false
}

// SetDisabled gets a reference to the given bool and assigns it to the Disabled field.
func (o *RecordResponse) SetDisabled(v bool) {
	o.Disabled = &v
}

func (o RecordResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.RootName != nil {
		toSerialize["rootName"] = o.RootName
	}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	if o.Content != nil {
		toSerialize["content"] = o.Content
	}
	if o.ChangeDate != nil {
		toSerialize["changeDate"] = o.ChangeDate
	}
	if o.Ttl != nil {
		toSerialize["ttl"] = o.Ttl
	}
	if o.Prio != nil {
		toSerialize["prio"] = o.Prio
	}
	if o.Disabled != nil {
		toSerialize["disabled"] = o.Disabled
	}
	return json.Marshal(toSerialize)
}

type NullableRecordResponse struct {
	value *RecordResponse
	isSet bool
}

func (v NullableRecordResponse) Get() *RecordResponse {
	return v.value
}

func (v *NullableRecordResponse) Set(val *RecordResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableRecordResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableRecordResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRecordResponse(val *RecordResponse) *NullableRecordResponse {
	return &NullableRecordResponse{value: val, isSet: true}
}

func (v NullableRecordResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRecordResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


