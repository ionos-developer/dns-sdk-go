/*
DNS API

## Working with the API Every endpoint uses the `X-API-Key` header for authorization, to obtain the key please see the [Official Documentation](/docs/getstarted).  Please note that any zone or record updates might conflict with active services. In such cases, the DNS records belonging to the conflicting services will be deactivated.  ## Support Support questions may be posted in English: <a href='/docs/getstarted#support'>API Beta Support</a>.  Please note that in the Beta phase we offer support in the business Hours Mo-Fri 9:00-17:00 EET. <h2> <details>   <summary>Release notes</summary>    Vesion 1.0.0   Exposed CRUD operations for customer zone. </details> </h2> 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dns

import (
	"encoding/json"
)

// DynDnsRequest struct for DynDnsRequest
type DynDnsRequest struct {
	Domains []string `json:"domains"`
	// Dynamic Dns description.
	Description *string `json:"description,omitempty"`
}

// NewDynDnsRequest instantiates a new DynDnsRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDynDnsRequest(domains []string) *DynDnsRequest {
	this := DynDnsRequest{}
	this.Domains = domains
	return &this
}

// NewDynDnsRequestWithDefaults instantiates a new DynDnsRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDynDnsRequestWithDefaults() *DynDnsRequest {
	this := DynDnsRequest{}
	return &this
}

// GetDomains returns the Domains field value
func (o *DynDnsRequest) GetDomains() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Domains
}

// GetDomainsOk returns a tuple with the Domains field value
// and a boolean to check if the value has been set.
func (o *DynDnsRequest) GetDomainsOk() ([]string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Domains, true
}

// SetDomains sets field value
func (o *DynDnsRequest) SetDomains(v []string) {
	o.Domains = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *DynDnsRequest) GetDescription() string {
	if o == nil || o.Description == nil {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DynDnsRequest) GetDescriptionOk() (*string, bool) {
	if o == nil || o.Description == nil {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *DynDnsRequest) HasDescription() bool {
	if o != nil && o.Description != nil {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *DynDnsRequest) SetDescription(v string) {
	o.Description = &v
}

func (o DynDnsRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["domains"] = o.Domains
	}
	if o.Description != nil {
		toSerialize["description"] = o.Description
	}
	return json.Marshal(toSerialize)
}

type NullableDynDnsRequest struct {
	value *DynDnsRequest
	isSet bool
}

func (v NullableDynDnsRequest) Get() *DynDnsRequest {
	return v.value
}

func (v *NullableDynDnsRequest) Set(val *DynDnsRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableDynDnsRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableDynDnsRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDynDnsRequest(val *DynDnsRequest) *NullableDynDnsRequest {
	return &NullableDynDnsRequest{value: val, isSet: true}
}

func (v NullableDynDnsRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDynDnsRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


