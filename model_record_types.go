/*
DNS API

## Working with the API Every endpoint uses the `X-API-Key` header for authorization, to obtain the key please see the [Official Documentation](https://developer.hosting.ionos.com/docs/getstarted).  Please note that any zone or record updates might conflict with active services. In such cases, the DNS records belonging to the conflicting services will be deactivated.  ## Support Support questions may be posted in English: <a href='https://developer.hosting.ionos.com/docs/getstarted#support'>API Beta Support</a>.  Please note that in the Beta phase we offer support in the business Hours Mo-Fri 9:00-17:00 EET. <h2> <details>   <summary>Release notes</summary>   <ul>     <li>Version 1.0.0 Exposed CRUD operations for customer zone.</li>     <li>Version 1.0.1 Added response body for UPDATE and CREATE record operations.</li>   </ul> </details> </h2> 

API version: 1.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dns

import (
	"encoding/json"
	"fmt"
)

// RecordTypes Holds supported dns record types.
type RecordTypes string

// List of recordTypes
const (
	A RecordTypes = "A"
	AAAA RecordTypes = "AAAA"
	CNAME RecordTypes = "CNAME"
	MX RecordTypes = "MX"
	NS RecordTypes = "NS"
	SOA RecordTypes = "SOA"
	SRV RecordTypes = "SRV"
	TXT RecordTypes = "TXT"
	CAA RecordTypes = "CAA"
)

// All allowed values of RecordTypes enum
var AllowedRecordTypesEnumValues = []RecordTypes{
	"A",
	"AAAA",
	"CNAME",
	"MX",
	"NS",
	"SOA",
	"SRV",
	"TXT",
	"CAA",
}

func (v *RecordTypes) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := RecordTypes(value)
	for _, existing := range AllowedRecordTypesEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid RecordTypes", value)
}

// NewRecordTypesFromValue returns a pointer to a valid RecordTypes
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewRecordTypesFromValue(v string) (*RecordTypes, error) {
	ev := RecordTypes(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for RecordTypes: valid values are %v", v, AllowedRecordTypesEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v RecordTypes) IsValid() bool {
	for _, existing := range AllowedRecordTypesEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to recordTypes value
func (v RecordTypes) Ptr() *RecordTypes {
	return &v
}

type NullableRecordTypes struct {
	value *RecordTypes
	isSet bool
}

func (v NullableRecordTypes) Get() *RecordTypes {
	return v.value
}

func (v *NullableRecordTypes) Set(val *RecordTypes) {
	v.value = val
	v.isSet = true
}

func (v NullableRecordTypes) IsSet() bool {
	return v.isSet
}

func (v *NullableRecordTypes) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRecordTypes(val *RecordTypes) *NullableRecordTypes {
	return &NullableRecordTypes{value: val, isSet: true}
}

func (v NullableRecordTypes) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRecordTypes) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

